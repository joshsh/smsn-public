* :HM6CTfPUY7DiEjid: RenameMe
    @created 1340095989097
    @sharability 0.75
    @weight 0.5

# use the export service in Brain-mode, then:
v <- read.table(file("/tmp/joshkb-vertices.tsv"), header=TRUE, sep="\t", quote="", comment.char="")
# note: values are corrupted for ease of viewing
v <- data.frame(created=v$created, id=v$id, weight=v$weight, sharability=v$sharability, value=substr(v$value, 1, 50), alias=v$alias, l=nchar(as.vector(v$alias)))
e <- read.table(file("/tmp/joshkb-edges.tsv"), header=TRUE)

# Make sure you have all rows (compare with "wc -l /tmp/tinkernotes-vertices.txt").
# R apparently skips rows when it becomes confused.
nrow(v)

# 0.5179733 as of 2012-10-27
mean(v$weight)
# 0.595236 as of 2012-10-27
mean(v$sharability)

hist(v$weight, xlim=c(0, 1))
hist(v$sharability, xlim=c(0, 1))


################################################################################
# oddball weight and sharability values

odd.w <- subset(v, v$weight %% 0.25 != 0)
odd.s <- subset(v, v$sharability %% 0.25 != 0)

# paste output into a file and run the following to get a list into TinkerNotes
# vim ids
# cat /tmp/ids | sed 's/^ *\[.*\] *//'| tr ' ' '\n' | sed 's/$/: */'
odd.s$id


################################################################################
# creation time

# TODO: dates on axes
hist(v$created, breaks=50)

times <- as.POSIXct(v$created/1000,  origin="1970-01-01", tz="GMT")

mod <- (v$created - 5*60*60*1000) %% (24*60*60*1000) / (60*60*1000)
hist(mod, breaks=24, main="creation time by hour of day (EST)")


################################################################################
# simple edge analysis

# find root nodes
nonroots <- unique(e$to)
all <- v$id
roots <- setdiff(all, nonroots)
# the first time I looked for them, on 2012-07-14, there were only 166 roots
length(roots)

# note: reorganizing the graph so that there were only 2 root nodes did not
# significantly affect PageRank


################################################################################
# PageRank

library(igraph)

g <- read.graph(file("/tmp/joshkb-edges.tsv"), format="ncol", directed = TRUE, weights = "no", names = "yes")

ecount(g)
vcount(g)

# Only 7% more edges than vertices (as of 2012-07-12)
ecount(g) / vcount(g)

#V(g)
#E(g)

# 32 as of 2012-07-12
diameter(g)

# the PageRank results are unintuitive, but apparently correct.
pg <- page.rank(g)
tmp <- data.frame(id=V(g)$name, score=pg$vector)
m <- merge(tmp, v, by="id")
ranked <- m[rev(order(m[, "score"])),]
ranked[1:50,]

# PageRank via GraphJung is similar to the above
prt <- read.table(file("/tmp/tinkernotes-pagerank.txt"), header=TRUE)
m <- merge(prt, v, by="id")
> ranked <- m[rev(order(m[, "score"])),]
ranked[1:50,]

# the PageRank of the *transpose graph* is *far* more enlightening
gout <- g
m <- get.adjacency(g, sparse=TRUE)
gin <- graph.adjacency(t(m))
pgout <- page.rank(gout)
pgin <- page.rank(gin)
tmp <- data.frame(id=V(g)$name, score=pgin$vector)
m <- merge(tmp, v, by="id")
ranked <- m[rev(order(m[, "score"])),]
ranked[1:50,]

# combined PageRank
# in-PageRank currently dominates the ranking of the top nodes
score <- (pgin$vector + pgout$vector) / 2
tmp <- data.frame(id=V(g)$name, score=score)
m <- merge(tmp, v, by="id")
ranked <- m[rev(order(m[, "score"])),]
ranked[1:50,]

# rank vertices by in-degree
# Even this is about as useful as the out-edges-PageRank results above
d <- degree(g, mode="in")
tmp <- data.frame(id=V(g)$name, score=d) 
m <- merge(tmp, v, by="id")
ranked <- m[rev(order(m[, "score"])),]
ranked[1:50,]

# alternative construction of the graph (apparently not necessary/useful)
t <- read.table(file("/tmp/tinkernotes-edges.txt"), header=TRUE)
tmp <- unique(c(as.vector(t$from), as.vector(t$to)))
vid <- data.frame(id=tmp, gid=1:length(tmp))
y <- merge(t, vid, by.x="from", by.y="id")
z <- merge(y, vid, by.x="to", by.y="id")
adj <- data.frame(from=z$gid.x, to=z$gid.y)
g <- graph.data.frame(adj)


################################################################################
# degree distribution

# Out-degree follows a power law, for the most part
plot(degree.distribution(g, mode="out"), log="xy")

# In-degree follows a distribution vaguely resembling a power-law after degree=1
plot(degree.distribution(g, mode="in"), log="xy", xlab="in-degree + 1", ylab="number of notes")

# Total degree is dominated by out-degree
plot(degree.distribution(g, mode="total"), log="xy")


################################################################################
# connected components

# Discover disconnected islands of brain
c <- clusters(g)

tmp <- data.frame(index=c(1:length(c$csize)), size=c$csize)
x <- subset(tmp, size == max(c$csize))
i <- x[1,1] - 1

tmp <- data.frame(id=V(g)$name, c$membership)
oddballs <- subset(tmp, c.membership != i)
x <- merge(oddballs, v, by="id")
paste(x$id, ": * ", x$value, sep="")
# vim /tmp/d
# cat /tmp/d | grep ":" | sed 's/\[[0-9]*\]..//' | sed 's/"[ ]*$//' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/'


################################################################################
# clusters / community detection

library(igraph)

# cat /tmp/extendo-edges.txt | grep -v "^from.to$" | sort -u > /tmp/extendo-edges-unique.txt
gu <- read.graph(file("/tmp/extendo-edges-unique.txt"), format="ncol", directed = FALSE, weights = "no", names = "yes")

# Unfortunately, this segfaults.
# Initially, I thought it was because the graph was not fully connected, but it happens even
# after I got rid of the other roots.
#f <- fastgreedy.community(gu)

#cm <- spinglass.community(gu, spins=10)

# R crashes on the second step
#cm <- walktrap.community(gu, modularity=TRUE)
#m <- community.to.membership(gu, cm$merges, steps=which.max(cm$modularity) - 1)

cm <- leading.eigenvector.community(gu)
s <- data.frame(id=cm[8], cm[2])
s <- data.frame(id=s$names, membership=s$membership)
m <- merge(s, v, by="id")

# Huge (48719).  So huge that the clustering is practically meaningless.
ones <- subset(m, membership==1)

# This small (838-large) cluster seems to be mostly about opioid use
twos <- subset(m, membership==2)

# Small (349), seems to be focused on Relpax use
threes <- subset(m, membership==3)

# Tiny (285), focused on self-reflection
fours <- subset(m, membership==4)

# Medium (1374), people and places
fives <- subset(m, membership==5)

# Tiny (162), the "death and depression word list"
sixes <- subset(m, membership==6)