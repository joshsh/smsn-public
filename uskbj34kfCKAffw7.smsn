@id uskbj34kfCKAffw7
@title a solution: consider order of evaluation
@created 1502064576335
@text ```
efficient:
a ++ (b ++ (c ++ (d ++ (e ++ f))))  

inefficient:
((((a ++ b) ++ c) ++ d) ++ e) ++ f  

=>
efficient:
gcd' :: Int -> Int -> Writer [String] Int  
gcd' a b  
    | b == 0 = do  
        tell ["Finished with " ++ show a]  
        return a  
    | otherwise = do  
        tell [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)]  
        gcd' b (a `mod` b)  

inefficient:

import Control.Monad.Writer  
  
gcdReverse :: Int -> Int -> Writer [String] Int  
gcdReverse a b  
    | b == 0 = do  
        tell ["Finished with " ++ show a]  
        return a  
    | otherwise = do  
        result <- gcdReverse b (a `mod` b)  
        tell [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)]  
        return result
```
