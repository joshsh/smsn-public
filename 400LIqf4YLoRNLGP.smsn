@id 400LIqf4YLoRNLGP
@title maybe I implemented it?
@created 1513531668583
@text ```
% This first part is from Lee Raich's paper on higher-order Prolog.
apply(plus, A, plus(A)).
apply(plus(A), B, C) :- plus(A,B,C).
apply(append, A, append(A)).
apply(append(A), B, C) :- append(A,B,C).

%... all other procedures missing >= 2 args
apply(apply, A, apply(A)).
apply(apply(A), B, C) :- apply(A, B, C).


% The rest is mine, and I'm not sure whether it works.
  % % It seems to work for functions:
  % 
  % ?- apply(append,[1],[2],[1,2]).
  % true.
  % 
  % % unless they are trivial:
  % ?- apply(f,a,b,c).
  % false.

%% apply/4
apply(F,A,B,C) :- apply(F,A,FA), apply(FA,B,C).

%% apply/5
apply(F,A,B,C,D) :- apply(F,A,B,FAB), apply(FAB,C,D).

% to test apply/4, /5.
f(a,b,c) :- 3=3.
f(a,b,c,d) :- 3=3.
```
