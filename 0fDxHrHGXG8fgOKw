* :0fDxHrHGXG8fgOKw: my technical interview prep program in R
    @created 1460514321299
    @sharability 0.75
    @weight 0.75

all.alg <- c(
  all.dp <- c(
    "Bellman–Ford algorithm",
    "Dijkstra's algorithm",
    "Floyd–Warshall algorithm",
    "Johnson's algorithm",
    "Bellman–Ford algorithm",
    "Cheney's algorithm",
    "Dijkstra's algorithm",
    "Ford-Fulkerson algorithm",
    "Kruskal's algorithm",
    "Prim's algorithm"),
  all.others <- c(
    "binary search"))
all.task.alg <- c(
  "best-case time complexity",
  "worst-case time complexity",
  "average-case time complexity",
  "best-case space complexity",
  "worst-case space complexity",
  "average-case space complexity",
  "code it from scratch",
  "describe its basic operation",
  "categorize and characterize the algorithm",
  "discuss the various forms of the algorithm, and their pros and cons")

all.sort <- c(
  "bubble sort",
  "merge sort",
  "quicksort",
  "insertion sort",
  "bucket sort",
  "heapsort",
  "selection sort",
  "Timsort")
all.task.sort <- c(
  all.task.alg,
  "is it a stable sort?")

all.prob <- c(
  all.prob.p <- c(
    "2-satisfiability",
    "approximate string matching",
    "Levenshtein distance",
    "longest common substring problem",
    "longest increasing subsequence",
    "stable marriage problem"),
  all.prob.np.hard <- c(
    "bin packing problem",
    "integer programming",
    "knapsack problem",
    "longest common subsequence problem",
    "longest path problem",
    "maximal independent set",
    "minimum-weight triangulation",
    "travelling salesman problem"),
  all.prob.np.complete <- c(
    "boolean satisfiability problem",
    "clique problem",
    "graph bandwidth",
    "Hamiltonian path problem",
    "maximum cut",
    "partition problem",
    "set cover problem",
    "vertex cover problem"),
  c(
    "find a topological ordering of a DAG",
    "test whether graph is connected",
    "find all occurrences of a given string in another string",
    "find the convex hull of a set of points"))
all.task.prob <- c(
  "describe the problem",
  "what is the complexity class of the problem?",
  "describe a solution to the problem",
  "code a solution to the problem",
  "discuss the time complexity of a good solution",
  "discuss the space complexity of a good solution",
  "name a solution and prove that it is correct")

all.method <- c(
  "dynamic programming",
  "proof of correctness of an algorithm",
  "time complexity analysis of an algorithm")
all.task.method <- c(
  "describe the technique or task",
  "provide an example of the technique",
  "discuss your approach to the problem",
  "describe a time when you had to solve such a problem")

all.ds <- c(
  "array",
  "associative array",
  "AVL tree",
  "B-tree",
  "B+ tree",
  "binary tree",
  "bit vector",
  "cartesian tree",
  "directed acyclic graph",
  "directed graph",
  "doubly linked list",
  "hash table",
  "heap as array",
  "heap as linked tree",
  "hypergraph",
  "indexable skip list",
  "k-d tree",
  "planar graph",
  "queue",
  "red-black tree",
  "singly linked list",
  "skip list",
  "splay tree",
  "stack",
  "treap",
  "trie",
  "undirected graph")
all.task.ds <- c(
  "provide a definition",
  "describe its advantages over alternative data structures",
  "list relevant algorithms",
  "list relevant problems and their time/space complexity",
  "average case access/search/insertion/deletion time complexity",
  "worst case access/search/insertion/deletion time complexity",
  "worst case space complexity")

all.amazonlp <- c(
  "customer obsession",
  "ownership",
  "invent and simplify",
  "right a lot",
  "hire and develop the best",
  "insist on the highest standards",
  "think big",
  "bias for action",
  "frugality",
  "learn and be curious",
  "earn trust",
  "dive deep",
  "have backbone; disagree and commit",
  "deliver results")
all.task.amazonlp <- c(
  "define and describe",
  "provide a positive example",
  "provide a negative example and how you dealt with it")

all.class <- c(
  "Scanner")
all.task.class <- c(
  "names and signatures of principal methods")

all.java <- c(
  "split a string on a sequence of one or more characters",
  "find dimensions of a multi-dimensional array")
all.task.java <- c(
  "point out relevant API(s)",
  "describe edge cases or gotchas")

all.number <- c(
  "2^6",
  "2^7",
  "2^8",
  "2^9",
  "2^10",
  "2^12",
  "2^16",
  "2^32")
all.task.number <- c(
  "value in base 10")

all.datatype <- c(
  "Java byte",
  "Java short",
  "Java int",
  "Java long",
  "Java float",
  "Java double",
  "Java boolean",
  "Java char")
all.task.datatype <- c(
  "maximum and minimum values",
  "representation and precision")

all.theory <- c(
  "NP hard",
  "NP complete",
  "NP",
  "P",
  "decision problem",
  "function problem",
  "optimization problem",
  "combinatorial optimization problem",
  "approximation ratio",
  "O(n)",
  "Omega(n)",
  "Theta(n)",
  "o(n)")
all.task.theory <- c(
  "provide a definition",
  "provide examples")

all.math <- c(
  "logarithm",
  "two's complement notation")
all.task.math <- c(
  "provide a definition",
  "list important properties or identities",
  "describe its role in algorithm design")

all.tech <- c(
  "datagram",
  "packet switching")
all.task.tech <- c(
  "provide a definition",
  "explain how it is used",
  "list specific standards")

all.standard <- c(
  "Transport Level Security")
all.task.standard <- c(
  "describe",
  "provide a basic specification")

all.pattern <- c(
  all.pattern.creational <- c(
    "abstract factory pattern",
    "builder pattern",
    "factory method pattern",
    "lazy initialization",
    "multiton pattern",
    "object pool pattern",
    "prototype pattern",
    "Resource Acquisition Is Initialization",
    "singleton pattern"),
  all.pattern.structural <- c(
    "adapter pattern",
    "bridge pattern",
    "composite pattern",
    "decorator pattern",
    "facade pattern",
    "flyweight pattern",
    "Front Controller pattern",
    "module pattern",
    "proxy pattern"),
  all.pattern.behavioral <- c(
    "blackboard pattern",
    "chain-of-responsibility pattern",
    "interpreter pattern",
    "iterator pattern",
    "mediator pattern",
    "memento pattern",
    "Null Object pattern",
    "publish–subscribe pattern",
    "servant (design pattern)",
    "specification pattern",
    "state pattern",
    "strategy pattern",
    "template method pattern",
    "visitor pattern"),
  all.pattern.concurrency <- c(
    "active object",
    "balking pattern",
    "double-checked locking",
    "asynchronous method invocation",
    "guarded suspension",
    "join-pattern",
    "lock (computer science)",
    "messaging pattern",
    "monitor (synchronization)",
    "reactor pattern",
    "readers–writer lock",
    "scheduler pattern",
    "thread pool pattern",
    "thread-local storage"))
all.task.pattern <- c(
  "define",
  "describe pros and cons",
  "provide an example")
  
tasksets <- c(
  list(all.alg, all.task.alg),
  list(all.sort, all.task.sort),
  list(all.prob, all.task.prob),
  list(all.method, all.task.method),
  list(all.ds, all.task.ds),
  list(all.amazonlp, all.task.amazonlp),
  list(all.class, all.task.class),
  list(all.java, all.task.java),
  list(all.number, all.task.number),
  list(all.datatype, all.task.datatype),
  list(all.theory, all.task.theory),
  list(all.math, all.task.math),
  list(all.tech, all.task.tech),
  list(all.standard, all.task.standard),
  list(all.pattern, all.task.pattern))

choose.task <- function() {
  n <- length(tasksets)/2
  obj.lists <- tasksets[2 * 1:n - 1]
  objects <- unlist(obj.lists)
  i <- sample(1:length(objects), 1)
  j <- subset(data.frame(i=1:length(obj.lists), t=cumsum(sapply(obj.lists, length)) - i), t >= 0)[1,1]
  tasks <- unlist(tasksets[j*2])
  paste(objects[i], ": ", tasks[sample(1:length(tasks), 1)], sep="")
}

choose.task()