@id SD6v7ryZhahcyRav
@title lifting (+) from numbers to numeric functions
@created 1502075264475
@text ```
In Learn You a Haskkell, in the chapter For a Few Monads More, in the section on state, there appears this:

    Prelude Data.Monoid> :t (+) <$> (*2) <*> (+10)
    (+) <$> (*2) <*> (+10) :: Num b => b -> b

According to ghci,

    Prelude Data.Monoid> :t (+) <$> (*2) <*> (+10)  
    (+) <$> (*2) <*> (+10) :: Num b => b -> b
    Prelude Data.Monoid> :t (<$>)
    (<$>) :: Functor f => (a -> b) -> f a -> f b
    Prelude Data.Monoid> :t (<*>)
    (<*>) :: Applicative f => f (a -> b) -> f a -> f b

Here is a derivation for the first type listed above:

    Let b = a -> a, r = a, f a = (-> r a)
    (*2) :: (+10) :: r -> a = f a
    (+) <$> (*2) :: (a -> b) <$> (f a) :: f b
    (+) <$> (*2) <*> (+10) :: f (a -> a) <*> f a

Here's an intuition for it: <$> (fmap) lifts (+) from (a -> a -> a) to (f a -> f a -> f a), where f = (-> a) = numbers coming from an a.
```
