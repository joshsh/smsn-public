@id rmXqWNS0awl66JdS
@title it is not entirely functional; order matters
@created 1513208281603
@text ```
This works: 
    enjoys(vincent,X)  :-  burger(X),   
                           \+  big_kahuna_burger(X).   

    burger(X)  :-  big_mac(X).   
    burger(X)  :-  big_kahuna_burger(X).   
    burger(X)  :-  whopper(X).   
       
    big_mac(a).   
    big_kahuna_burger(b).   
    big_mac(c).   
    whopper(d).   

But now suppose we rewrite the first line as follows:   
   
    enjoys(vincent,X)  :-  \+  big_kahuna_burger(X),  burger(X).   
   
 Note that from a declarative point of view, this should make no difference: after all,  
 burger(x) and not big kahuna burger(x) is logically equivalent to not big kahuna burger  
 (x) and burger(x) . That is, no matter what the variable x denotes, it is impossible for one  
 of these expressions to be true and the other false. Nonetheless, here’s what happens  
 when we pose the same query:   
   
    ?-  enjoys(vincent,X).   
       
    no   
   
 What’s going on? Well, in the modified database, the first thing that Prolog has to check  
 is whether \+  big_kahuna_burger(X) holds, which means that it must check whether  
 big_kahuna_burger(X) fails. But this succeeds. After all, the database contains the  
 information big_kahuna_burger(b) . So the query \+  big_kahuna_burger(X) fails, and  
 hence the original query does too. In a nutshell, the crucial difference between the two  
 programs is that in the original version (the one that works right) we use \+ only after we  
 have instantiated the variable X . In the new version (which goes wrong) we use \+  
 before we have done this. The difference is crucial.
```
@priority 0.5
